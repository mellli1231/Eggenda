Index: app/src/main/java/com/example/eggenda/ui/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eggenda.ui.home\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.BitmapFactory\r\nimport android.media.MediaPlayer\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.os.VibrationEffect\r\nimport android.os.Vibrator\r\nimport android.view.HapticFeedbackConstants\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Button\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.example.eggenda.R\r\nimport com.example.eggenda.UserPref\r\nimport com.example.eggenda.databinding.DialogHatchBinding\r\nimport com.example.eggenda.databinding.FragmentHomeBinding\r\nimport com.example.eggenda.gamePetChoose.SharedPreferenceManager\r\nimport com.example.eggenda.gamePlay.gameActivity\r\nimport com.example.eggenda.ui.database.entryDatabase.EntryDatabase\r\nimport com.example.eggenda.ui.database.entryDatabase.EntryDatabaseDao\r\nimport com.example.eggenda.ui.database.entryDatabase.EntryRepo\r\nimport com.example.eggenda.ui.database.entryDatabase.EntryViewModel\r\nimport com.example.eggenda.ui.database.entryDatabase.EntryViewModelFactory\r\nimport com.example.eggenda.ui.task.ConfirmTasksActivity\r\nimport com.example.eggenda.ui.task.TaskAdapter\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport java.io.File\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    private var _binding: FragmentHomeBinding? = null\r\n    private var mediaPlayer: MediaPlayer? = null\r\n\r\n    private lateinit var sharedPreferenceManager: SharedPreferenceManager\r\n    // This property is only valid between onCreateView and\r\n    // onDestroyView.\r\n    private val binding get() = _binding!!\r\n\r\n    private var currentExperience = 0\r\n    private val maxExperience = 100\r\n\r\n    private val PET_OWNERSHIP_KEY = \"pet_ownership\"\r\n    private val DEFAULT_PET_OWNERSHIP = arrayOf(1, 1, 1, 0, 0, 0, 0, 0, 0, 0)\r\n\r\n    private lateinit var database: EntryDatabase\r\n    private lateinit var databaseDao: EntryDatabaseDao\r\n    private lateinit var repo: EntryRepo\r\n    private lateinit var entryViewModel: EntryViewModel\r\n    private lateinit var viewModelFactory: EntryViewModelFactory\r\n\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n        sharedPreferenceManager = SharedPreferenceManager(requireContext())\r\n        val root: View = binding.root\r\n        val petOwnership = loadPetOwnership()\r\n//        sharedPreferenceManager = SharedPreferenceManager(requireContext())\r\n\r\n        //get username and id\r\n        val user = UserPref.getUsername(requireContext())\r\n        val id = UserPref.getId(requireContext())\r\n        println(\"user: ${user}, id: ${id}\")\r\n\r\n        //load profile picture\r\n        val sharedPreferences = requireContext().getSharedPreferences(\"user_${id}\", Context.MODE_PRIVATE)\r\n        binding.displayName.text=user //set username\r\n        val profileImgPath = sharedPreferences.getString(\"profileImagePath\", null)\r\n        if (profileImgPath != null) { //if profile pic exists, set\r\n            val ogFile = File(profileImgPath)\r\n            if (ogFile.exists()) {\r\n                val bitmap = BitmapFactory.decodeFile(ogFile.absolutePath)\r\n                binding.profilePic.setImageBitmap(bitmap)\r\n            } else {\r\n                binding.profilePic.setImageResource(R.drawable.defaultprofile)\r\n            }\r\n        } else {\r\n            binding.profilePic.setImageResource(R.drawable.defaultprofile)\r\n        }\r\n\r\n        // xp\r\n        loadProgress()\r\n        updateProgress()\r\n\r\n        // Initialize egg and progress views\r\n        binding.eggImageView.setOnClickListener {\r\n            if (ownsAll()) {\r\n                Toast.makeText(requireContext(), \"You own all pets already!\", Toast.LENGTH_SHORT).show()\r\n                // Perform subtle haptic feedback if egg is not ready to hatch\r\n                binding.eggImageView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)\r\n            } else if (currentExperience >= maxExperience) {\r\n                // Show cracked egg\r\n                binding.eggImageView.setImageResource(R.drawable.egg_cracked_blue)\r\n                binding.experienceTextView.text = \"Egg has hatched!\"\r\n\r\n                // save the array of pets\r\n                sharedPreferenceManager.savePetOwnership(petOwnership)\r\n\r\n                playSound(R.raw.sound_success)\r\n                Handler(Looper.getMainLooper()).postDelayed({\r\n                    resetEggAndExperience()\r\n                    hatchEgg(petOwnership)\r\n                }, 1500)\r\n                triggerVibration(1500)\r\n\r\n            } else {\r\n                // Perform subtle haptic feedback if egg is not ready to hatch\r\n                binding.eggImageView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY)\r\n            }\r\n        }\r\n\r\n        // Button to test what happens when Xp is gained\r\n        binding.gainXp.setOnClickListener {\r\n            gainExperience(20)\r\n        }\r\n\r\n        val newQuestButton: Button = root.findViewById(R.id.new_quest)\r\n        newQuestButton.setOnClickListener {\r\n            val intent = Intent(requireContext(), ConfirmTasksActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        val gotoGameButton: Button = root.findViewById(R.id.game)\r\n        gotoGameButton.setOnClickListener {\r\n            val intent = Intent(requireContext(), gameActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        val questListView: ListView = binding.questList\r\n\r\n        // Load tasks into quest board ListView\r\n        lifecycleScope.launch {\r\n            EntryDatabase.getInstance(requireContext()).entryDatabaseDao.getAllTasks().collectLatest { tasks ->\r\n                // val taskTitles = tasks.map { it.title }\r\n                val adapter = TaskAdapter(requireContext(), tasks)\r\n                questListView.adapter = adapter\r\n            }\r\n        }\r\n\r\n        return root\r\n    }\r\n\r\n    private fun loadPetOwnership(): Array<Int> {\r\n        val sharedPreferences = requireContext().getSharedPreferences(\"eggenda_prefs\", Context.MODE_PRIVATE)\r\n        //orig\r\n//        val json = sharedPreferences.getString(PET_OWNERSHIP_KEY, null)\r\n        val json = requireContext().getSharedPreferences(\"user_${UserPref.getId(requireContext())}\", Context.MODE_PRIVATE).getString(PET_OWNERSHIP_KEY, null)\r\n        return if (json != null) {\r\n            val type = object : TypeToken<Array<Int>>() {}.type\r\n            Gson().fromJson(json, type)\r\n        } else {\r\n            // Initialize with all pets unowned and save it to SharedPreferences\r\n            sharedPreferenceManager.savePetOwnership(DEFAULT_PET_OWNERSHIP)\r\n            DEFAULT_PET_OWNERSHIP.clone() // Return a clone to avoid modifying the original\r\n        }\r\n    }\r\n\r\n\r\n//    private fun savePetOwnership(petOwnership: Array<Int>) {\r\n//        val sharedPreferences = requireContext().getSharedPreferences(\"eggenda_prefs\", Context.MODE_PRIVATE)\r\n//        val editor = sharedPreferences.edit()\r\n//        val json = Gson().toJson(petOwnership)\r\n//        editor.putString(PET_OWNERSHIP_KEY, json)\r\n//        editor.apply()\r\n//    }\r\n\r\n    private fun hatchEgg(petOwnership: Array<Int>) {\r\n        val unownedPets = petOwnership.indices.filter { petOwnership[it] == 0 }\r\n        if (unownedPets.isNotEmpty()) {\r\n            // Choose a random unowned pet and mark it as owned\r\n            val randomPet = unownedPets.random()\r\n            petOwnership[randomPet] = 1\r\n\r\n            // Save pets, and also provide popup with specific pet's photo\r\n            sharedPreferenceManager.savePetOwnership(petOwnership)\r\n            showCongratsPopup(randomPet)\r\n        }\r\n    }\r\n\r\n    // Function to check if user owns all pets\r\n    private fun ownsAll(): Boolean {\r\n        val sharedPreferences = requireContext().getSharedPreferences(\"eggenda_prefs\", Context.MODE_PRIVATE)\r\n        val json = sharedPreferences.getString(\"pet_ownership\", null)\r\n\r\n        if (json != null) {\r\n            val type = object : TypeToken<Array<Int>>() {}.type\r\n            val petOwnership: Array<Int> = Gson().fromJson(json, type)\r\n\r\n            // Check if every pet in the array is owned (i.e., every value is 1)\r\n            return petOwnership.all { it == 1 }\r\n        }\r\n\r\n        // If no ownership data exists, user does not own all pets\r\n        return false\r\n    }\r\n\r\n    private fun triggerVibration(time: Long) {\r\n        val vibrator = context?.getSystemService(Context.VIBRATOR_SERVICE) as? Vibrator\r\n        vibrator?.let {\r\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n                // For Android O and above\r\n                it.vibrate(VibrationEffect.createOneShot(time, VibrationEffect.DEFAULT_AMPLITUDE))\r\n            } else {\r\n                // For older versions\r\n                it.vibrate(time) // Vibrate for 200 milliseconds\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun playSound(soundResId: Int) {\r\n        // Release any existing MediaPlayer instance\r\n        mediaPlayer?.release()\r\n\r\n        // Initialize and play the new sound\r\n        mediaPlayer = MediaPlayer.create(context, soundResId)\r\n        mediaPlayer?.start()\r\n\r\n        // Release the media player when the sound finishes playing\r\n        mediaPlayer?.setOnCompletionListener {\r\n            it.release()\r\n        }\r\n    }\r\n\r\n    private fun loadProgress() {\r\n        val sharedPreferences = requireContext().getSharedPreferences(\"eggenda_prefs\", Context.MODE_PRIVATE)\r\n        currentExperience = sharedPreferences.getInt(\"currentExperience\", 0) // Default to 0 if not found\r\n        // TODO: make this shared preference the same as whatever the tasks updates\r\n    }\r\n\r\n    // Function for incrementing experience progress\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun updateProgress() {\r\n        binding.progressBar.progress = currentExperience\r\n        binding.circularProgress.progress = currentExperience\r\n        binding.experienceTextView.text = \"Experience: $currentExperience/$maxExperience\"\r\n    }\r\n\r\n    // Eventually, we won't need this function because user experience increase based on tasks done\r\n    private fun gainExperience(amount: Int) {\r\n        if (currentExperience < maxExperience) {\r\n            currentExperience += amount\r\n            if (currentExperience > maxExperience) {\r\n                currentExperience = maxExperience\r\n            }\r\n            saveExperienceProgress()\r\n            updateProgress()\r\n        }\r\n    }\r\n\r\n    // Eventually, we won't need this either\r\n    private fun saveExperienceProgress() {\r\n        val sharedPreferences = requireContext().getSharedPreferences(\"eggenda_prefs\", Context.MODE_PRIVATE)\r\n        sharedPreferences.edit().putInt(\"currentExperience\", currentExperience).apply()\r\n    }\r\n\r\n    // Reset the egg and experience progress\r\n    // TODO: properly implement xp bar with shared preference xp/levels\r\n    // also, maybe try to implement random egg colors/pictures\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun resetEggAndExperience() {\r\n        currentExperience = 0\r\n        saveExperienceProgress()\r\n        binding.progressBar.progress = currentExperience\r\n        binding.circularProgress.progress = currentExperience\r\n        binding.experienceTextView.text = \"Experience: $currentExperience/$maxExperience\"\r\n        binding.eggImageView.setImageResource(R.drawable.egg_uncracked_blue_white)\r\n    }\r\n\r\n    // Show a popup dialog with a congratulatory message and pet picture\r\n    // TODO: get the randomly chosen pet, and get its image placed in the popup\r\n    private fun showCongratsPopup(petIndex: Int) {\r\n        // Inflate the dialog layout\r\n        val dialogBinding = DialogHatchBinding.inflate(LayoutInflater.from(requireContext()))\r\n\r\n        // Set the pet image based on petIndex\r\n        when (petIndex) {\r\n            0 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_a_babyowlbear)\r\n            1 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_b_ambushmouseviper)\r\n            2 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_b_evilwater)\r\n            3 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_animatednutcracker)\r\n            4 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_deepseamerman)\r\n            5 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_flamingskull)\r\n            6 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_glutinousbunny)\r\n            7 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_healingsprite)\r\n            8 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_lilmothy)\r\n            9 -> dialogBinding.petImageView.setImageResource(R.drawable.pet_c_shyraccoon)\r\n        }\r\n\r\n        // Create and display the dialog\r\n        val dialogBuilder = AlertDialog.Builder(requireContext())\r\n        dialogBuilder.setView(dialogBinding.root)\r\n        dialogBuilder.setPositiveButton(\"OK\") { dialog, _ ->\r\n            resetEggAndExperience() // Reset egg and experience after user acknowledges the dialog\r\n            dialog.dismiss()\r\n        }\r\n        dialogBuilder.create().show()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eggenda/ui/home/HomeFragment.kt b/app/src/main/java/com/example/eggenda/ui/home/HomeFragment.kt
--- a/app/src/main/java/com/example/eggenda/ui/home/HomeFragment.kt	(revision f055bc3046cff3199ea319f0d8b83c3505a878af)
+++ b/app/src/main/java/com/example/eggenda/ui/home/HomeFragment.kt	(date 1732517999882)
@@ -74,7 +74,7 @@
         sharedPreferenceManager = SharedPreferenceManager(requireContext())
         val root: View = binding.root
         val petOwnership = loadPetOwnership()
-//        sharedPreferenceManager = SharedPreferenceManager(requireContext())
+//        sharedPreferenceManager = SharedPreferenceManager(requireContext())klh
 
         //get username and id
         val user = UserPref.getUsername(requireContext())
