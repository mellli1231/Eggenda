Index: app/src/main/res/layout/game_pet_play_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"350dp\"\r\n    android:layout_height=\"550dp\"\r\n    android:orientation=\"vertical\"\r\n    android:gravity=\"center\"\r\n    android:id=\"@+id/game_dialog_root_layout\">\r\n\r\n    <View\r\n        android:id=\"@+id/game_dailog_background_view\"\r\n        android:layout_width=\"320dp\"\r\n        android:layout_height=\"30dp\"\r\n        android:background=\"@color/disabled_color\"\r\n        android:padding=\"3dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/titleHorLine\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintHorizontal_bias=\"0.485\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/titleHorLine\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/game_card_petName\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:fontFamily=\"@font/titan_one\"\r\n        android:text=\"Shy Raccoon\"\r\n        android:textSize=\"20sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/game_dailog_background_view\"\r\n        app:layout_constraintEnd_toEndOf=\"@+id/game_dailog_background_view\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/game_dailog_background_view\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/game_dailog_background_view\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/game_card_petId\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:fontFamily=\"@font/titan_one\"\r\n        android:text=\"004\"\r\n        android:textSize=\"20sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/game_dailog_background_view\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/game_card_petName\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/game_dailog_background_view\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/game_dailog_background_view\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/card_image_line\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintGuide_end=\"402dp\" />\r\n\r\n    <ImageView\r\n        android:id=\"@+id/game_card_pet_bg\"\r\n        android:layout_width=\"310dp\"\r\n        android:layout_height=\"190dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/card_image_line\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintHorizontal_bias=\"0.464\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/card_image_line\"\r\n        app:layout_constraintVertical_bias=\"0.526\"\r\n        app:srcCompat=\"@drawable/a_card_bg\" />\r\n\r\n    <ImageView\r\n        android:id=\"@+id/game_card_pet_image\"\r\n        android:layout_width=\"170dp\"\r\n        android:layout_height=\"170dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/card_image_line\"\r\n        app:layout_constraintEnd_toEndOf=\"@+id/game_card_pet_bg\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/card_image_line\"\r\n        app:srcCompat=\"@drawable/pet_c_shyraccoon\" />\r\n\r\n\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:fontFamily=\"@font/titan_one\"\r\n        android:text=\"Artist : Nelson Fang\"\r\n        android:textSize=\"15dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.093\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/descConsLay\"\r\n        app:layout_constraintVertical_bias=\"0.515\" />\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/descConsLay\"\r\n        android:layout_width=\"320dp\"\r\n        android:layout_height=\"260dp\"\r\n        android:orientation=\"vertical\"\r\n        android:background=\"@color/disabled_color\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/descriptionBox_line\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintHorizontal_bias=\"0.581\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/card_virtical_line\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/descriptionBox_line\"\r\n        app:layout_constraintVertical_bias=\"0.458\">\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_petSkill_name\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"Skill Name\"\r\n            android:textSize=\"17sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/descHorLine\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintHorizontal_bias=\"0.528\"\r\n            app:layout_constraintStart_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/descHorLine\"\r\n            app:layout_constraintVertical_bias=\"0.478\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_skillDescription\"\r\n            android:layout_width=\"290dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"Deal 100 water damage\\non the 5th turn\\nwhen this unit is placed on the board\"\r\n            android:textSize=\"14.5sp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/game_dialog_petSkill_name\" />\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_condition_title\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"Condition\"\r\n            android:textSize=\"17sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintStart_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/game_dialog_skillDescription\" />\r\n\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_next_reminder\"\r\n            android:layout_width=\"290dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"5 more turn(s) to stay on the board                 jwlqlwkepo\"\r\n            android:textSize=\"14.5sp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/game_dialog_condition_title\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_next_dmg_title\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"Next Damage\"\r\n            android:textSize=\"17sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintStart_toStartOf=\"@+id/descVerLine\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/game_dialog_next_reminder\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/game_dialog_nextDmgAmount\"\r\n            android:layout_width=\"290dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/titan_one\"\r\n            android:padding=\"5dp\"\r\n            android:text=\"100 water damage\"\r\n            android:textSize=\"14.5sp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintHorizontal_bias=\"0.533\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/game_dialog_next_dmg_title\" />\r\n\r\n        <androidx.constraintlayout.widget.Guideline\r\n            android:id=\"@+id/descVerLine\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            app:layout_constraintGuide_begin=\"49dp\" />\r\n\r\n        <androidx.constraintlayout.widget.Guideline\r\n            android:id=\"@+id/descHorLine\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"horizontal\"\r\n            app:layout_constraintGuide_begin=\"16dp\" />\r\n\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/card_virtical_line\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintGuide_end=\"175dp\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/titleHorLine\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintGuide_percent=\"0.06\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/descriptionBox_line\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintGuide_end=\"170dp\" />\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/game_pet_play_dialog.xml b/app/src/main/res/layout/game_pet_play_dialog.xml
--- a/app/src/main/res/layout/game_pet_play_dialog.xml	(revision d6aeb29b682aafd4c1baf8b4e989027655399b9d)
+++ b/app/src/main/res/layout/game_pet_play_dialog.xml	(date 1733031056805)
@@ -118,31 +118,31 @@
             app:layout_constraintTop_toTopOf="@+id/descHorLine"
             app:layout_constraintVertical_bias="0.478" />
 
-        <TextView
-            android:id="@+id/game_dialog_skillDescription"
-            android:layout_width="290dp"
-            android:layout_height="wrap_content"
-            android:fontFamily="@font/titan_one"
-            android:padding="5dp"
-            android:text="Deal 100 water damage\non the 5th turn\nwhen this unit is placed on the board"
-            android:textSize="14.5sp"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/game_dialog_petSkill_name" />
-
-
-        <TextView
-            android:id="@+id/game_dialog_condition_title"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:fontFamily="@font/titan_one"
-            android:padding="5dp"
-            android:text="Condition"
-            android:textSize="17sp"
-            android:textStyle="bold"
-            app:layout_constraintEnd_toStartOf="@+id/descVerLine"
-            app:layout_constraintStart_toStartOf="@+id/descVerLine"
-            app:layout_constraintTop_toBottomOf="@+id/game_dialog_skillDescription" />
+<!--        <TextView-->
+<!--            android:id="@+id/game_dialog_skillDescription"-->
+<!--            android:layout_width="290dp"-->
+<!--            android:layout_height="wrap_content"-->
+<!--            android:fontFamily="@font/titan_one"-->
+<!--            android:padding="5dp"-->
+<!--            android:text="Deal 100 water damage\non the 5th turn\nwhen this unit is placed on the board"-->
+<!--            android:textSize="14.5sp"-->
+<!--            app:layout_constraintEnd_toEndOf="parent"-->
+<!--            app:layout_constraintStart_toStartOf="parent"-->
+<!--            app:layout_constraintTop_toBottomOf="@+id/game_dialog_petSkill_name" />-->
+
+
+<!--        <TextView-->
+<!--            android:id="@+id/game_dialog_condition_title"-->
+<!--            android:layout_width="match_parent"-->
+<!--            android:layout_height="wrap_content"-->
+<!--            android:fontFamily="@font/titan_one"-->
+<!--            android:padding="5dp"-->
+<!--            android:text="Condition"-->
+<!--            android:textSize="17sp"-->
+<!--            android:textStyle="bold"-->
+<!--            app:layout_constraintEnd_toStartOf="@+id/descVerLine"-->
+<!--            app:layout_constraintStart_toStartOf="@+id/descVerLine"-->
+<!--            app:layout_constraintTop_toBottomOf="@+id/game_dialog_skillDescription" />-->
 
 
         <TextView
@@ -155,7 +155,7 @@
             android:textSize="14.5sp"
             app:layout_constraintEnd_toEndOf="parent"
             app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/game_dialog_condition_title" />
+            app:layout_constraintTop_toBottomOf="@+id/game_dialog_petSkill_name" />
 
         <TextView
             android:id="@+id/game_dialog_next_dmg_title"
@@ -163,7 +163,7 @@
             android:layout_height="wrap_content"
             android:fontFamily="@font/titan_one"
             android:padding="5dp"
-            android:text="Next Damage"
+            android:text="Pet Ability"
             android:textSize="17sp"
             android:textStyle="bold"
             app:layout_constraintEnd_toStartOf="@+id/descVerLine"
Index: app/src/main/java/com/example/eggenda/gamePlay/petDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eggenda.gamePlay\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.fragment.app.DialogFragment\r\nimport com.example.eggenda.R\r\nimport com.example.eggenda.gamePetChoose.PetChooseDialogFragment\r\nimport com.example.eggenda.gamePetChoose.PetChooseDialogFragment.Companion\r\n\r\nclass petDialog : DialogFragment(){\r\n\r\n    private var petId: Int? = null\r\n    private var petOrder: Int? = null\r\n    private var petCondition : String ?= null\r\n    private var petNextDmg : String? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view =  inflater.inflate(R.layout.game_pet_play_dialog, container, false)\r\n\r\n        val petInfo = petInfo2()\r\n        val getId = arguments?.let {\r\n            petId = it.getInt(ARG_PET_ID)\r\n            petOrder = it.getInt(ARG_PET_ORDER)\r\n            petCondition = it.getString(ARG_PET_STATUS)\r\n            petNextDmg = it.getString(ARG_PET_NEXT_DMG)\r\n        }\r\n        val getpet = getId?.let { petInfo.getPetInfoById(petId!!) }\r\n\r\n\r\n        val element_background = dict.ELEMENT_STRING[getpet?.element!!]\r\n        val rarity = dict.RARETY_STRING[getpet?.rarity!!]\r\n        val rootLayout : View = view.findViewById(R.id.game_dialog_root_layout)\r\n\r\n\r\n        //rarity need to change\r\n        when (rarity){\r\n            \"LEGENDARY\" ->\r\n                when(element_background){\r\n                    \"Fire\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_fire_gold)\r\n                    \"Water\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_water_gold)\r\n                    \"Forest\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_forest_gold)\r\n                }\r\n            \"RARE\" ->\r\n                when(element_background){\r\n                    \"Fire\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_fire_silver)\r\n                    \"Water\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_water_silver)\r\n                    \"Forest\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_forest_silver)\r\n                }\r\n\r\n            \"NORMAL\" ->\r\n                when(element_background){\r\n                    \"Fire\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_fire_gray)\r\n                    \"Water\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_water_gray)\r\n                    \"Forest\" -> dialog?.window?.setBackgroundDrawableResource(R.drawable.game_dialog_forest_gray)\r\n                }\r\n\r\n\r\n        }\r\n\r\n        //set the data on views\r\n        if (getpet != null) {\r\n            view.findViewById<ImageView>(R.id.game_card_pet_image).setImageResource(getpet.imageId)\r\n            view.findViewById<TextView>(R.id.game_card_petId).text = String.format(\"%03d\", getpet.id)\r\n            view.findViewById<TextView>(R.id.game_card_petName).text = getpet.name\r\n            view.findViewById<TextView>(R.id.game_dialog_petSkill_name).text = getpet.skillName\r\n            view.findViewById<TextView>(R.id.game_dialog_skillDescription).text = getpet.description\r\n            view.findViewById<TextView>(R.id.game_dialog_next_reminder).text = petCondition\r\n            view.findViewById<TextView>(R.id.game_dialog_nextDmgAmount).text = petNextDmg\r\n        }\r\n\r\n        return view\r\n    }\r\n\r\n    override fun onCreate (savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        Log.d(\"DialogFragment\", \"SecondDialogFragment created\")\r\n        val petInfo = petInfo2()\r\n        val getId = arguments?.getInt(ARG_PET_ID)\r\n        val getpet = getId?.let { petInfo.getPetInfoById(it) }\r\n    }\r\n\r\n\r\n    companion object{\r\n        private const val ARG_PET_ID = \"pet_id\"\r\n        private const val ARG_PET_ORDER = \"pet_order\"\r\n        private const val ARG_PET_STATUS = \"pet_status\"\r\n        private const val ARG_PET_NEXT_DMG = \"pet_next_damage\"\r\n\r\n        fun newInstance(petId : Int, petOrder : Int, petStatus: String, petNextDmg : String) : petDialog {\r\n            val fragment = petDialog()\r\n            val args = Bundle().apply {\r\n                putInt(ARG_PET_ID, petId)\r\n                putInt(ARG_PET_ORDER, petOrder)\r\n                putString(ARG_PET_STATUS, petStatus)\r\n                putString(ARG_PET_NEXT_DMG, petNextDmg)}\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        //set the size of the dialog\r\n        dialog?.window?.setLayout(\r\n            resources.getDimensionPixelSize(R.dimen.card_width),\r\n            resources.getDimensionPixelSize(R.dimen.card_hight),\r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eggenda/gamePlay/petDialog.kt b/app/src/main/java/com/example/eggenda/gamePlay/petDialog.kt
--- a/app/src/main/java/com/example/eggenda/gamePlay/petDialog.kt	(revision d6aeb29b682aafd4c1baf8b4e989027655399b9d)
+++ b/app/src/main/java/com/example/eggenda/gamePlay/petDialog.kt	(date 1733031056804)
@@ -72,7 +72,7 @@
             view.findViewById<TextView>(R.id.game_card_petId).text = String.format("%03d", getpet.id)
             view.findViewById<TextView>(R.id.game_card_petName).text = getpet.name
             view.findViewById<TextView>(R.id.game_dialog_petSkill_name).text = getpet.skillName
-            view.findViewById<TextView>(R.id.game_dialog_skillDescription).text = getpet.description
+//            view.findViewById<TextView>(R.id.game_dialog_skillDescription).text = getpet.description
             view.findViewById<TextView>(R.id.game_dialog_next_reminder).text = petCondition
             view.findViewById<TextView>(R.id.game_dialog_nextDmgAmount).text = petNextDmg
         }
Index: app/src/main/java/com/example/eggenda/gamePlay/petInfo2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eggenda.gamePlay\r\n\r\nimport com.example.eggenda.R\r\nimport kotlin.math.abs\r\n\r\nclass petInfo2 {\r\n\r\n    private val TOTAL = 10\r\n\r\n    private val GLUTINOUS_BUNNY= 0\r\n    private val EVIL_WATER = 1\r\n    private val FLAMING_SKULL = 2\r\n    private val LIL_MOTHY = 3\r\n    private val SHY_RACCOON = 4\r\n    private val HEALING_SPRITE = 5\r\n    private val BABY_OWLBEAR = 6\r\n    private val AMBUSH_MOUSEVIPER = 7\r\n    private val ANIMATED_NUTCRACKER = 8\r\n    private val DEEPSEA_MERMAN = 9\r\n\r\n    fun getPetInfoById(id: Int):Pet?{\r\n        val petMap: Map<Int, () -> Pet> = mapOf(\r\n            // TODO\r\n            BABY_OWLBEAR to {babyOwlbear()},\r\n            AMBUSH_MOUSEVIPER to {ambushMouseviper()},\r\n            EVIL_WATER to {evilWater()},\r\n            ANIMATED_NUTCRACKER to {animatedNutcracker()},\r\n            DEEPSEA_MERMAN to {deepseaMerman()},\r\n            FLAMING_SKULL to {flamingSkull()},\r\n            GLUTINOUS_BUNNY to {glutinousBunny()},\r\n            HEALING_SPRITE to {healingSprite()},\r\n            LIL_MOTHY to {lilMothman()},\r\n            SHY_RACCOON to {shyRaccoon()}\r\n\r\n        )\r\n        return petMap[id]?.invoke()\r\n    }\r\n\r\n    fun getTotalPetAmount():Int{return TOTAL}\r\n\r\n    interface Pet{\r\n        val id: Int\r\n        val name: String\r\n        val imageId: Int\r\n        val element: Int\r\n        val attackType: Int\r\n        val damage: Int\r\n        val count: Int\r\n        val skillName: String\r\n        val description: String\r\n        val rarity: Int\r\n\r\n        fun dealDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int):Int\r\n        fun attackCountdown(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int):Int\r\n        fun condition(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int):String\r\n        fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int):String\r\n        fun resetAfterDamage():Boolean\r\n    }\r\n\r\n    private class glutinousBunny :Pet {\r\n        override val id: Int = 0\r\n        override val name: String = \"Glutinous Bunny\"\r\n        override val imageId: Int = R.drawable.pet_c_glutinousbunny\r\n        override val element: Int = dict.ELEMENT_FOREST\r\n        override val attackType: Int = dict.ATK_TYPE_STAY\r\n        override val damage: Int = -30\r\n        override val count: Int = 2\r\n        override val skillName :String =\"Sleepy...\"\r\n        override val description: String = \"Heals \"+(damage * -1)+\" hp every \"+count +\" turns\\n\" +\r\n                \"when it stays on the board.\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.stayNum != 0 && petStatus[petOrder]!!.stayNum % count == 0 && petStatus[petOrder]!!.location == dict.onBoard) {\r\n\r\n                return damage\r\n            }\r\n            return 0////\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return 0\r\n            }\r\n//        return (petStatus[petOrder]!!.stayNum % (catInfo.count) )\r\n            return count - petStatus[petOrder]!!.stayNum % (count+1)\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count.toString()+\" more turn(s) to stay on the board \"\r\n            }\r\n            else{\r\n                return attackCountdown(petStatus, petOrder,deckSize).toString()+\" more turn(s) to stay on the board\"\r\n            }\r\n\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n            return \"Heals \"+(damage * -1).toString()+\" hp\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    private class evilWater() :Pet {\r\n        override val id: Int = 1\r\n        override val name: String = \"Evil Water\"\r\n        override val imageId: Int = R.drawable.pet_b_evilwater\r\n        override val element: Int = dict.ELEMENT_WATER\r\n        override val attackType: Int = dict.ATK_TYPE_RETURN\r\n        override val damage: Int = 20\r\n        override val count: Int = 1\r\n        override val skillName :String =\"Fragile!\"\r\n        override val description: String = \"Deal \"+damage.toString()+\" \"+dict.ELEMENT_STRING[element]+\" damages\\n\" +\r\n                \"when it is knocked out from the board\\n\" +\r\n                \"on the next turn after it is placed on the board.\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.stayNum == count && petStatus[petOrder]!!.location == dict.onDECK ) {\r\n                return damage\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            val stayNum = petStatus[petOrder]!!.stayNum\r\n            if( stayNum <= 1 ){\r\n                return count - stayNum\r\n            }\r\n            return -1\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return \"Knocked out from the board after\\n\" +\r\n                        \"1 more turn it stays on the board \"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                var countStr = \"∞\"\r\n                if(count >= 0){\r\n                    countStr = count.toString()\r\n                }\r\n                return \"Knocked out from the board after\\n\" +\r\n                        countStr+\" more turn it stays on the board \"\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n            val count = attackCountdown(petStatus, petOrder,deckSize)\r\n            if(count >= 0){\r\n                return damage.toString()+\" \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n            }\r\n            return \"0 \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return true\r\n        }\r\n    }\r\n\r\n    private class flamingSkull :Pet {\r\n        override val id: Int = 2\r\n        override val name: String = \"Flaming Skull\"\r\n        override val imageId: Int = R.drawable.pet_c_flamingskull\r\n        override val element: Int =  dict.ELEMENT_FIRE\r\n        override val attackType: Int = dict.ATK_TYPE_BOUNCE\r\n        override val damage: Int = 40\r\n        override val count: Int = 2\r\n        override val skillName:String = \"You can't catch me!\"\r\n        override val description: String = \"Deal \"+damage+\" \"+dict.ELEMENT_STRING[element]+\" damage\\n\" +\r\n                \"after every \"+count+ \" position change when it is on the board.\"\r\n        override val rarity: Int = dict.RARITY_RARE\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            val skullStatus = petStatus[petOrder]!!\r\n            if(skullStatus.bounceNum !=0 && skullStatus.bounceNum % count == 0 && skullStatus.location == dict.onBoard) {\r\n                return damage\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            return count - petStatus[petOrder]!!.bounceNum\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count.toString()+\" more bounce when it stay on the board\\n\"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                return count.toString()+\" more bounce when it stay on the board\\n\"\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            return damage.toString()+\" \"+dict.ELEMENT_STRING[element]+\" damages\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return true\r\n        }\r\n    }\r\n\r\n    private class lilMothman :Pet {\r\n        override val id: Int = 3\r\n        override val name: String = \"Lil' Mothman\"\r\n        override val imageId: Int = R.drawable.pet_c_lilmothy\r\n        override val element: Int =  dict.ELEMENT_FIRE\r\n        override val attackType: Int = dict.ATK_TYPE_STAY\r\n        override val damage: Int = 20\r\n        override val count: Int = 1\r\n        override val skillName: String = \"Math is important! \"\r\n//        override val description: String = \"dealing 9, 16, 21, 24, 25, 24, 21, 16, 9\\n\"+dict.ELEMENT_STRING[element]+\" damages sequentially \\n\" +\r\n//                \"after it placed on the board\"\r\n        override val description: String =\"Let x = number of turns it stays on the board,\\n\" +\r\n        \"deals (x mod 10) * (10 - (x mod 10) ) \"+ dict.ELEMENT_STRING[element]+\" damages\"\r\n        override val rarity: Int = dict.RARITY_LEGENDARY\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.location == dict.onBoard){\r\n                val stayNum = petStatus[petOrder]!!.stayNum\r\n                return (stayNum % 10) * (10 - stayNum % 10)\r\n//                return 0\r\n            }\r\n            return 0\r\n            //he\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.location == dict.onBoard && petStatus[petOrder]!!.stayNum >0 ){\r\n                return 0\r\n            }\r\n            return 1\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count.toString()+\" more turns to stay on the board\\n\"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                return count.toString()+\" more turns to stay on the board\\n\"\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return \" 9 fire damages\"\r\n            }\r\n            else{\r\n                return dealDamage(petStatus, petOrder,deckSize).toString()+\" \"+dict.ELEMENT_STRING[element]+\" damages\"\r\n            }\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return false\r\n        }\r\n    }\r\n    private class shyRaccoon :Pet {\r\n        override val id: Int = 4\r\n        override val name: String = \"Shy Raccoon\"\r\n        override val imageId: Int = R.drawable.pet_c_shyraccoon\r\n        override val element: Int =  dict.ELEMENT_WATER\r\n        override val attackType: Int = dict.ATK_TYPE_STAY\r\n        override val damage: Int = 30\r\n        override val count: Int = 1\r\n        override val skillName: String = \"Hello...\"\r\n        override val description: String = \"Deal (\"+damage+\"x the number of pet on board) \"+dict.ELEMENT_STRING[element]+\" damages\\n\" +\r\n                \"on the \"+count+ \"th turn\\n\" +\r\n                \"after it is placed on the board\"\r\n        override val rarity: Int = dict.RARITY_LEGENDARY\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            var petOnBoard = 0\r\n            for(i in 0..<deckSize){\r\n                if(petStatus[i]!!.location == dict.onBoard){\r\n                    petOnBoard++\r\n                }\r\n            }\r\n            if(attackCountdown(petStatus, petOrder,deckSize) == 0){\r\n                return damage * petOnBoard\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.stayNum < 2  && petStatus[petOrder]!!.location == dict.onBoard){\r\n                return count - petStatus[petOrder]!!.stayNum\r\n            }\r\n            else if (petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count\r\n            }\r\n            return -1\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count.toString()+\" more turns to stay on the board\\n\"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                var countStr = \"∞\"\r\n                if(count >= 0){\r\n                    countStr = count.toString()\r\n                }\r\n                return  countStr+\" more turns to stay on the board\\n\"\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            val count = attackCountdown(petStatus, petOrder,deckSize)\r\n            var petOnBoard = 0\r\n            for(i in 0..<deckSize){\r\n                if(petStatus[i]!!.location == dict.onBoard){\r\n                    petOnBoard++\r\n                }\r\n            }\r\n            if(attackCountdown(petStatus, petOrder,deckSize) != -1){\r\n                val mulDmg = petOnBoard * damage\r\n                return mulDmg.toString()+\" \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n            }\r\n            return \"0 \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    private class healingSprite :Pet {\r\n        // TODO: make pet unique\r\n        override val id: Int = 5\r\n        override val name: String = \"Healing Sprite\"\r\n        override val imageId: Int = R.drawable.pet_c_healingsprite\r\n        override val element: Int = dict.ELEMENT_WATER\r\n        override val attackType: Int = dict.ATK_TYPE_STAY\r\n        override val damage: Int = -20\r\n        override val count: Int = 4\r\n        override val skillName :String =\"Light of the hospital\"\r\n        override val description: String = \"Heals \"+(damage * -1)+\" hp if there are \"+count+\" pets on the board\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            var temp = 0\r\n            for(i in 0..<deckSize){\r\n                if (petStatus[i]?.location == dict.onBoard){\r\n                    temp ++\r\n                }\r\n            }\r\n            if(temp == count) {\r\n\r\n                return damage\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n//        return (petStatus[petOrder]!!.stayNum % (catInfo.count) )\r\n            var temp = 0\r\n            for(i in 0..<deckSize){\r\n                if (petStatus[i]?.location == dict.onBoard){\r\n                    temp ++\r\n                }\r\n            }\r\n            return abs(temp - count)\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            var temp = 0\r\n            for(i in 0..<deckSize){\r\n                if (petStatus[i]?.location == dict.onBoard){\r\n                    temp ++\r\n                }\r\n            }\r\n            if(temp > count){\r\n                return (temp - count).toString()+\" pets to knock out from the board.\"\r\n            }\r\n            else{\r\n                return (count - temp).toString()+\" pets to put on the board.\"\r\n            }\r\n\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n            return \"Heals \"+(damage * -1).toString()+\" hp\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    private class babyOwlbear :Pet {\r\n        // TODO: make this pet unique\r\n        override val id: Int = 6\r\n        override val name: String = \"Baby Owlbear\"\r\n        override val imageId: Int = R.drawable.pet_a_babyowlbear\r\n        override val element: Int = dict.ELEMENT_FOREST\r\n        override val attackType: Int = dict.ATK_TYPE_RETURN\r\n        override val damage: Int = 15\r\n        override val count: Int = 0\r\n        override val skillName :String =\"Good place to eat...\"\r\n        override val description: String = \"Deals number of turns it stay on the board x \"+damage+dict.ELEMENT_STRING[element]+\" damage\\n\" +\r\n                \"when it is knocked out from the board.\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.stayNum > 0 && petStatus[petOrder]!!.location == dict.onDECK ) {\r\n                return damage * petStatus[petOrder]!!.stayNum\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return 1\r\n            }\r\n\r\n            return 0\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n\r\n            return count.toString()+\" more turn(s) to stay on the board \"\r\n\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n            return \"Deals \"+(damage * petStatus[petOrder]!!.stayNum ).toString()+\" damage\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return true\r\n        }\r\n    }\r\n\r\n    private class ambushMouseviper() :Pet {\r\n        // TODO: make this pet unique\r\n        override val id: Int = 7\r\n        override val name: String = \"Ambush Mouseviper\"\r\n        override val imageId: Int = R.drawable.pet_b_ambushmouseviper\r\n        override val element: Int = dict.ELEMENT_FOREST\r\n        override val attackType: Int = dict.ATK_TYPE_RETURN\r\n        override val damage: Int = 30\r\n        override val count: Int = 2\r\n        override val skillName :String =\"Toxic\"\r\n        override val description: String = \"Deal \"+damage.toString()+\" \"+dict.ELEMENT_STRING[element]+\" damages\\n\" +\r\n                \"after every \"+count+\" turns\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            if(petStatus[petOrder]!!.stayNum != 0 && petStatus[petOrder]!!.stayNum % count == 0 && petStatus[petOrder]!!.location == dict.onBoard) {\r\n                return damage\r\n            }\r\n            return 0\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n//            val stayNum = petStatus[petOrder]!!.stayNum\r\n//            if( stayNum <= 1 ){\r\n//                return count - stayNum\r\n//            }\r\n//            return -1\r\n\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return 0\r\n            }\r\n//        return (petStatus[petOrder]!!.stayNum % (catInfo.count) )\r\n            return count - petStatus[petOrder]!!.stayNum % (count+1)\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n//            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n//                return \"Knocked out from the board after\\n\" +\r\n//                        \"1 more turn it stays on the board \"\r\n//            }\r\n//            else{\r\n//                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n//                var countStr = \"∞\"\r\n//                if(count >= 0){\r\n//                    countStr = count.toString()\r\n//                }\r\n//                return \"Knocked out from the board after\\n\" +\r\n//                        countStr+\" more turn it stays on the board \"\r\n//            }\r\n\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return count.toString()+\" more turn(s) to stay on the board \"\r\n            }\r\n            else{\r\n                return attackCountdown(petStatus, petOrder,deckSize).toString()+\" more turn(s) to stay on the board\"\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n//            val count = attackCountdown(petStatus, petOrder,deckSize)\r\n//            if(count >= 0){\r\n//                return damage.toString()+\" \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n//            }\r\n//            return \"0 \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n            return \"Deals \"+(damage ).toString()+dict.ELEMENT_STRING[element]+\" damages\\n\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return true\r\n        }\r\n    }\r\n\r\n    private class animatedNutcracker() :Pet {\r\n        // TODO: make this pet unique\r\n        override val id: Int = 8\r\n        override val name: String = \"Animated Nutcracker\"\r\n        override val imageId: Int = R.drawable.pet_c_animatednutcracker\r\n        override val element: Int = dict.ELEMENT_FIRE\r\n        override val attackType: Int = dict.ATK_TYPE_STAY\r\n        override val damage: Int = 100\r\n        override val count: Int = 0\r\n        override val skillName :String =\"Nut Cracker!\"\r\n        override val description: String = \"Deal \"+damage.toString()+\" \"+dict.ELEMENT_STRING[element]+\" damages\\n\" +\r\n                \"if there is no pets on the deck when this pet is placed on the board\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            var petOnBoard = 0\r\n            for(i in 0..<deckSize){\r\n                if(petStatus[i]!!.location == dict.onBoard){\r\n                    petOnBoard++\r\n                }\r\n            }\r\n            if(petStatus[petOrder]!!.stayNum == 0 && petOnBoard == deckSize && petStatus[petOrder]!!.location == dict.onBoard){\r\n                return damage\r\n            }\r\n            return 0\r\n\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            val stayNum = petStatus[petOrder]!!.stayNum\r\n            if( petStatus[petOrder]!!.location == dict.onBoard && stayNum == 0){\r\n                return 0\r\n            }\r\n            else if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return 1\r\n            }\r\n            return -1\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return \"0 more turn to stay on the board\\n\"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                var countStr = \"∞\"\r\n                if(count >= 0){\r\n                    countStr = count.toString()\r\n                }\r\n                return  countStr+\" more turn to stays on the board \"\r\n\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n//            var petOnBoard = 0\r\n//            for(i in 0..<deckSize){\r\n//                if(petStatus[i]!!.location == dict.onBoard){\r\n//                    petOnBoard++\r\n//                }\r\n//            }\r\n            if(attackCountdown(petStatus, petOrder,deckSize) != -1){\r\n//                val mulDmg = petOnBoard * damage\r\n                return damage.toString()+\" \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n            }\r\n            return \"0 \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return false\r\n        }\r\n    }\r\n\r\n    private class deepseaMerman() :Pet {\r\n        // TODO: make this pet unique\r\n        override val id: Int = 9\r\n        override val name: String = \"Deap-sea Merman\"\r\n        override val imageId: Int = R.drawable.pet_c_deepseamerman\r\n        override val element: Int = dict.ELEMENT_WATER\r\n        override val attackType: Int = dict.ATK_TYPE_RETURN\r\n        override val damage: Int = 15\r\n        override val count: Int = 1\r\n        override val skillName :String =\"Golden Fork\"\r\n        override val description: String = \"Deal \"+damage.toString()+\"x water pets on the board \"+dict.ELEMENT_STRING[element]+\" damages\\n\" +\r\n                \"after it is placed on the board.\"\r\n        override val rarity: Int = dict.RARITY_NORMAL\r\n\r\n        override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n\r\n            var petOnBoard = 0\r\n            for(i in 0..<deckSize){\r\n                if(petStatus[i]!!.location == dict.onBoard && petStatus[i]!!.element == dict.ELEMENT_WATER){\r\n                    petOnBoard++\r\n                }\r\n            }\r\n            if(attackCountdown(petStatus, petOrder,deckSize) == 0 && petStatus[petOrder]!!.location == dict.onBoard){\r\n                return damage * petOnBoard\r\n            }\r\n            return 0\r\n\r\n        }\r\n\r\n        override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {\r\n            val stayNum = petStatus[petOrder]!!.stayNum\r\n            if( stayNum == 0 ){\r\n                return stayNum\r\n            }\r\n            return -1\r\n        }\r\n\r\n        override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {\r\n            if(petStatus[petOrder]!!.location == dict.onDECK){\r\n                return \"0 more turn to stay on the board\\n\"\r\n            }\r\n            else{\r\n                val count = attackCountdown(petStatus, petOrder,deckSize)\r\n                var countStr = \"∞\"\r\n                if(count >= 0){\r\n                    countStr = count.toString()\r\n                }\r\n                return  countStr+\" more turn to stays on the board \"\r\n\r\n            }\r\n        }\r\n\r\n        override fun nextDamage(petStatus: Array<petStatus?>,petOrder:Int,deckSize:Int): String {\r\n            var petOnBoard = 0\r\n            for(i in 0..<deckSize){\r\n                if(petStatus[i]!!.location == dict.onBoard && petStatus[i]!!.element == dict.ELEMENT_WATER){\r\n                    petOnBoard++\r\n                }\r\n            }\r\n            if(attackCountdown(petStatus, petOrder,deckSize) != -1){\r\n                val mulDmg = petOnBoard * damage\r\n                return mulDmg.toString()+\" \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n            }\r\n            return \"0 \" +dict.ELEMENT_STRING[element]+\" damages\"\r\n        }\r\n\r\n        override fun resetAfterDamage(): Boolean {\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eggenda/gamePlay/petInfo2.kt b/app/src/main/java/com/example/eggenda/gamePlay/petInfo2.kt
--- a/app/src/main/java/com/example/eggenda/gamePlay/petInfo2.kt	(revision d6aeb29b682aafd4c1baf8b4e989027655399b9d)
+++ b/app/src/main/java/com/example/eggenda/gamePlay/petInfo2.kt	(date 1733031056805)
@@ -75,7 +75,7 @@
 
                 return damage
             }
-            return 0////
+            return 0
         }
 
         override fun attackCountdown(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {
@@ -88,10 +88,13 @@
 
         override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {
             if(petStatus[petOrder]!!.location == dict.onDECK){
-                return count.toString()+" more turn(s) to stay on the board "
+//                return count.toString()+" more turn(s) to stay on the board to heal" + (damage * -1)+ "hp"
+                return name + "needs to stay on board for " + count.toString()+" more turn(s) to heal the player " + (damage * -1)+ " hp"
             }
             else{
-                return attackCountdown(petStatus, petOrder,deckSize).toString()+" more turn(s) to stay on the board"
+//                return attackCountdown(petStatus, petOrder,deckSize).toString()+" more turn(s) to stay on the board"
+
+                return name + "has " + attackCountdown(petStatus, petOrder,deckSize).toString()+" more turn(s) to heal" + (damage * -1)+ "hp"
             }
 
         }
@@ -115,9 +118,12 @@
         override val damage: Int = 20
         override val count: Int = 1
         override val skillName :String ="Fragile!"
-        override val description: String = "Deal "+damage.toString()+" "+dict.ELEMENT_STRING[element]+" damages\n" +
-                "when it is knocked out from the board\n" +
-                "on the next turn after it is placed on the board."
+        override val description: String = "If Evil Water is knocked out of the board within 1 turn it was placed, " +
+                "deal " + damage.toString() + " Water Elemental damage to the Boss. "
+
+//            "Deal "+damage.toString()+" "+dict.ELEMENT_STRING[element]+" damages " +
+//                "when it is knocked out from the board" +
+//                "on the next turn after it is placed on the board."
         override val rarity: Int = dict.RARITY_NORMAL
 
         override fun dealDamage(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): Int {
@@ -137,8 +143,8 @@
 
         override fun condition(petStatus: Array<petStatus?>, petOrder: Int,deckSize:Int): String {
             if(petStatus[petOrder]!!.location == dict.onDECK){
-                return "Knocked out from the board after\n" +
-                        "1 more turn it stays on the board "
+                return "If Evil Water is knocked out on next turn, deals "+damage+" damage to boss.\n"  +
+                        "If it remains on the board at next turn, it will deal 0 damage to Boss."
             }
             else{
                 val count = attackCountdown(petStatus, petOrder,deckSize)
