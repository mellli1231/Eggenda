Index: app/src/main/java/com/example/eggenda/ui/settings/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.eggenda.ui.settings\r\n\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.SharedPreferences.Editor\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.preference.Preference\r\nimport androidx.preference.PreferenceFragmentCompat\r\nimport androidx.preference.PreferenceManager\r\nimport com.example.eggenda.LocaleHelper\r\nimport com.example.eggenda.R\r\nimport com.example.eggenda.UserPref\r\nimport com.example.eggenda.ui.account.LoginActivity\r\nimport com.example.eggenda.ui.database.userDatabase.UserDatabase\r\nimport com.example.eggenda.ui.database.userDatabase.UserDatabaseDao\r\nimport com.example.eggenda.ui.database.userDatabase.UserRepository\r\nimport com.example.eggenda.ui.database.userDatabase.UserViewModel\r\nimport com.example.eggenda.ui.database.userDatabase.UserViewModelFactory\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass SettingsFragment : PreferenceFragmentCompat(), SharedPreferences.OnSharedPreferenceChangeListener{\r\n    companion object {\r\n        const val DIALOG_KEY = \"dialog\"\r\n        const val TERMS_CONDITIONS_DIALOG = 0\r\n        const val LOGOUT_DIALOG = 1\r\n    }\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private lateinit var editor: Editor\r\n\r\n    private lateinit var database: UserDatabase\r\n    private lateinit var databaseDao: UserDatabaseDao\r\n    private lateinit var userViewModel: UserViewModel\r\n    private lateinit var repository: UserRepository\r\n    private lateinit var userViewModelFactory: UserViewModelFactory\r\n    private lateinit var FBdatabase: FirebaseDatabase\r\n    private lateinit var myRef: DatabaseReference\r\n\r\n    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        //load UI\r\n        setPreferencesFromResource(R.xml.preference, rootKey)\r\n\r\n        //initialize sharedPreference\r\n        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(requireContext())\r\n        editor = sharedPreferences.edit()\r\n\r\n        //initialize database and operations\r\n        FBdatabase = FirebaseDatabase.getInstance()\r\n        myRef = FBdatabase.reference.child(\"users\")\r\n        database = UserDatabase.getInstance(requireActivity())\r\n        databaseDao = database.userDatabaseDao\r\n        repository = UserRepository(databaseDao)\r\n        userViewModelFactory = UserViewModelFactory(repository)\r\n        userViewModel = ViewModelProvider(this, userViewModelFactory).get(UserViewModel::class.java)\r\n\r\n\r\n        //get user profile bar\r\n        val profilePref: Preference? = findPreference(\"user_profile\")\r\n        //if clicked, direct to profile settings\r\n        profilePref?.setOnPreferenceClickListener {\r\n            println(\"user profile bar clicked\")\r\n            val intent = Intent(requireContext(), ProfileActivity::class.java)\r\n            startActivity(intent)\r\n            true\r\n        }\r\n\r\n        val language: Preference? = findPreference(\"language\")\r\n        language?.setOnPreferenceChangeListener { preference, newValue ->\r\n            val languageCode = newValue as String\r\n            println(\"languageCode: $languageCode\")\r\n            editor.putString(\"language\", languageCode)\r\n            editor.apply()\r\n\r\n            if(LocaleHelper.getLanguage(requireContext()) != languageCode) {\r\n                println(\"changing language\")\r\n                println(\"calling localeHelper from settings\")\r\n                LocaleHelper.setLocale(requireContext(), languageCode)\r\n                Toast.makeText(requireActivity(), \"Language changed\", Toast.LENGTH_SHORT).show()\r\n                requireActivity().recreate()\r\n            }\r\n            true\r\n        }\r\n\r\n        val termsConditions: Preference? = findPreference(\"terms\")\r\n        termsConditions?.setOnPreferenceClickListener {\r\n            println(\"terms and conditions clicked\")\r\n            showMyDialogFragment(TERMS_CONDITIONS_DIALOG)\r\n\r\n            true\r\n        }\r\n\r\n        val logout: Preference? = findPreference(\"logout\")\r\n        logout?.setOnPreferenceClickListener {\r\n            println(\"logout button clicked\")\r\n            showMyDialogFragment(LOGOUT_DIALOG)\r\n\r\n            true\r\n        }\r\n\r\n        val deleteAll: Preference? = findPreference(\"deleteAll\")\r\n        deleteAll?.setOnPreferenceClickListener {\r\n            println(\"Deleting all users from database\")\r\n            viewLifecycleOwner.lifecycleScope.launch {\r\n                try {\r\n                    repository.deleteAll()\r\n\r\n                    myRef.child(\"users\").removeValue().addOnCompleteListener { task ->\r\n                        if (task.isSuccessful) {\r\n                            println(\"All users have been deleted successfully from Firebase.\")\r\n                            Toast.makeText(requireContext(), \"Deleted all users\", Toast.LENGTH_SHORT).show()\r\n                        } else {\r\n                            println(\"Failed to delete users from Firebase: ${task.exception?.message}\")\r\n                            Toast.makeText(requireContext(), \"Failed to delete from Firebase\", Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    }\r\n                } catch (e: Exception) {\r\n                    println(\"Error deleting users from Room database: ${e.message}\")\r\n                    Toast.makeText(requireContext(), \"Error deleting local data\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    class MyRunsDialogFragment : DialogFragment(), DialogInterface.OnClickListener {\r\n        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n            //get arguments and dialog details\r\n            lateinit var ret: Dialog\r\n            val bundle = arguments\r\n            val dialogId = bundle?.getInt(DIALOG_KEY)\r\n            val builder = AlertDialog.Builder(requireActivity())\r\n\r\n            if (dialogId == TERMS_CONDITIONS_DIALOG) {\r\n                val view: View = requireActivity().layoutInflater.inflate(\r\n                    R.layout.dialog_terms_conditions,\r\n                    null\r\n                )\r\n                builder.setView(view)\r\n                builder.setTitle(R.string.conditions_header)\r\n\r\n                builder.setNegativeButton(R.string.cancel_button, this)\r\n                ret = builder.create()\r\n            }\r\n            else if (dialogId == LOGOUT_DIALOG) {\r\n                val view: View = requireActivity().layoutInflater.inflate(\r\n                    R.layout.dialog_logout,\r\n                    null\r\n                )\r\n                builder.setView(view)\r\n                builder.setTitle(R.string.log_out)\r\n\r\n                //get sharedPreferences for account\r\n                val logoutBtn: Button = view.findViewById(R.id.logout_button)\r\n                val cancelBtn: Button = view.findViewById(R.id.cancel_button)\r\n                val id = UserPref.getId(requireContext())\r\n                val sharedPreferences : SharedPreferences =\r\n                    requireActivity().getSharedPreferences(\"user_${id}\", Context.MODE_PRIVATE)\r\n\r\n                //if confirm logout\r\n                logoutBtn.setOnClickListener {\r\n                    val editor = sharedPreferences.edit()\r\n                    editor.putBoolean(\"isLoggedIn\", false) //logout user\r\n                    editor.apply()\r\n\r\n                    Toast.makeText(requireActivity(), \"Logging Out\", Toast.LENGTH_SHORT).show()\r\n\r\n                    println(\"logging out id: ${id}\")\r\n                    //redirect to login page\r\n                    val intent = Intent(requireActivity(), LoginActivity::class.java)\r\n                    startActivity(intent)\r\n                    requireActivity().finish()\r\n                }\r\n\r\n                //dismiss if cancel button clicked\r\n                cancelBtn.setOnClickListener {\r\n                    dismiss()\r\n                }\r\n\r\n                ret = builder.create()\r\n            }\r\n\r\n            return ret\r\n        }\r\n\r\n        //function when buttons are clicked\r\n        override fun onClick(dialog: DialogInterface, item: Int) {\r\n            if(item == DialogInterface.BUTTON_NEGATIVE) {\r\n                println(\"fragment negative button clicked\")\r\n            }\r\n        }\r\n    }\r\n\r\n    //show dialog fragment\r\n    private fun showMyDialogFragment(dialogType: Int) {\r\n        val myDialog = MyRunsDialogFragment()\r\n        val bundle = Bundle().apply {\r\n            putInt(DIALOG_KEY, dialogType)\r\n        }\r\n        myDialog.arguments = bundle\r\n        myDialog.show(parentFragmentManager, \"my_dialog\")\r\n    }\r\n\r\n    override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences?, key: String?) {\r\n        //needed for fragment to run\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        sharedPreferences.registerOnSharedPreferenceChangeListener(this)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        sharedPreferences.unregisterOnSharedPreferenceChangeListener(this)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/eggenda/ui/settings/SettingsFragment.kt b/app/src/main/java/com/example/eggenda/ui/settings/SettingsFragment.kt
--- a/app/src/main/java/com/example/eggenda/ui/settings/SettingsFragment.kt	(revision 4808109e2d3d5a9b26ede04cb5e2e9d52675d12e)
+++ b/app/src/main/java/com/example/eggenda/ui/settings/SettingsFragment.kt	(date 1732418342228)
@@ -118,7 +118,7 @@
             viewLifecycleOwner.lifecycleScope.launch {
                 try {
                     repository.deleteAll()
-
+                    /*
                     myRef.child("users").removeValue().addOnCompleteListener { task ->
                         if (task.isSuccessful) {
                             println("All users have been deleted successfully from Firebase.")
